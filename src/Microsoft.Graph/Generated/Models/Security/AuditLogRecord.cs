// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models.Security {
    public class AuditLogRecord : Microsoft.Graph.Beta.Models.Entity, IParsable {
        /// <summary>The administrativeUnits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AdministrativeUnits {
            get { return BackingStore?.Get<List<string>?>("administrativeUnits"); }
            set { BackingStore?.Set("administrativeUnits", value); }
        }
#nullable restore
#else
        public List<string> AdministrativeUnits {
            get { return BackingStore?.Get<List<string>>("administrativeUnits"); }
            set { BackingStore?.Set("administrativeUnits", value); }
        }
#endif
        /// <summary>The auditData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Security.AuditData? AuditData {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Security.AuditData?>("auditData"); }
            set { BackingStore?.Set("auditData", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Security.AuditData AuditData {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Security.AuditData>("auditData"); }
            set { BackingStore?.Set("auditData", value); }
        }
#endif
        /// <summary>The auditLogRecordType property</summary>
        public Microsoft.Graph.Beta.Models.Security.AuditLogRecordType? AuditLogRecordType {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Security.AuditLogRecordType?>("auditLogRecordType"); }
            set { BackingStore?.Set("auditLogRecordType", value); }
        }
        /// <summary>The clientIp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientIp {
            get { return BackingStore?.Get<string?>("clientIp"); }
            set { BackingStore?.Set("clientIp", value); }
        }
#nullable restore
#else
        public string ClientIp {
            get { return BackingStore?.Get<string>("clientIp"); }
            set { BackingStore?.Set("clientIp", value); }
        }
#endif
        /// <summary>The createdDateTime property</summary>
        public DateTimeOffset? CreatedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The objectId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectId {
            get { return BackingStore?.Get<string?>("objectId"); }
            set { BackingStore?.Set("objectId", value); }
        }
#nullable restore
#else
        public string ObjectId {
            get { return BackingStore?.Get<string>("objectId"); }
            set { BackingStore?.Set("objectId", value); }
        }
#endif
        /// <summary>The operation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Operation {
            get { return BackingStore?.Get<string?>("operation"); }
            set { BackingStore?.Set("operation", value); }
        }
#nullable restore
#else
        public string Operation {
            get { return BackingStore?.Get<string>("operation"); }
            set { BackingStore?.Set("operation", value); }
        }
#endif
        /// <summary>The organizationId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrganizationId {
            get { return BackingStore?.Get<string?>("organizationId"); }
            set { BackingStore?.Set("organizationId", value); }
        }
#nullable restore
#else
        public string OrganizationId {
            get { return BackingStore?.Get<string>("organizationId"); }
            set { BackingStore?.Set("organizationId", value); }
        }
#endif
        /// <summary>The service property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Service {
            get { return BackingStore?.Get<string?>("service"); }
            set { BackingStore?.Set("service", value); }
        }
#nullable restore
#else
        public string Service {
            get { return BackingStore?.Get<string>("service"); }
            set { BackingStore?.Set("service", value); }
        }
#endif
        /// <summary>The userId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId {
            get { return BackingStore?.Get<string?>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#nullable restore
#else
        public string UserId {
            get { return BackingStore?.Get<string>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#endif
        /// <summary>The userPrincipalName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName {
            get { return BackingStore?.Get<string?>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#nullable restore
#else
        public string UserPrincipalName {
            get { return BackingStore?.Get<string>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#endif
        /// <summary>The userType property</summary>
        public AuditLogUserType? UserType {
            get { return BackingStore?.Get<AuditLogUserType?>("userType"); }
            set { BackingStore?.Set("userType", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new AuditLogRecord CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AuditLogRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"administrativeUnits", n => { AdministrativeUnits = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"auditData", n => { AuditData = n.GetObjectValue<Microsoft.Graph.Beta.Models.Security.AuditData>(Microsoft.Graph.Beta.Models.Security.AuditData.CreateFromDiscriminatorValue); } },
                {"auditLogRecordType", n => { AuditLogRecordType = n.GetEnumValue<AuditLogRecordType>(); } },
                {"clientIp", n => { ClientIp = n.GetStringValue(); } },
                {"createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                {"objectId", n => { ObjectId = n.GetStringValue(); } },
                {"operation", n => { Operation = n.GetStringValue(); } },
                {"organizationId", n => { OrganizationId = n.GetStringValue(); } },
                {"service", n => { Service = n.GetStringValue(); } },
                {"userId", n => { UserId = n.GetStringValue(); } },
                {"userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
                {"userType", n => { UserType = n.GetEnumValue<AuditLogUserType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfPrimitiveValues<string>("administrativeUnits", AdministrativeUnits);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Security.AuditData>("auditData", AuditData);
            writer.WriteEnumValue<AuditLogRecordType>("auditLogRecordType", AuditLogRecordType);
            writer.WriteStringValue("clientIp", ClientIp);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("objectId", ObjectId);
            writer.WriteStringValue("operation", Operation);
            writer.WriteStringValue("organizationId", OrganizationId);
            writer.WriteStringValue("service", Service);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
            writer.WriteEnumValue<AuditLogUserType>("userType", UserType);
        }
    }
}
