// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class CustomClaimsPolicy : Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The audienceOverride property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AudienceOverride
        {
            get { return BackingStore?.Get<string?>("audienceOverride"); }
            set { BackingStore?.Set("audienceOverride", value); }
        }
#nullable restore
#else
        public string AudienceOverride
        {
            get { return BackingStore?.Get<string>("audienceOverride"); }
            set { BackingStore?.Set("audienceOverride", value); }
        }
#endif
        /// <summary>The claims property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CustomClaimBase>? Claims
        {
            get { return BackingStore?.Get<List<CustomClaimBase>?>("claims"); }
            set { BackingStore?.Set("claims", value); }
        }
#nullable restore
#else
        public List<CustomClaimBase> Claims
        {
            get { return BackingStore?.Get<List<CustomClaimBase>>("claims"); }
            set { BackingStore?.Set("claims", value); }
        }
#endif
        /// <summary>The includeApplicationIdInIssuer property</summary>
        public bool? IncludeApplicationIdInIssuer
        {
            get { return BackingStore?.Get<bool?>("includeApplicationIdInIssuer"); }
            set { BackingStore?.Set("includeApplicationIdInIssuer", value); }
        }
        /// <summary>The includeBasicClaimSet property</summary>
        public bool? IncludeBasicClaimSet
        {
            get { return BackingStore?.Get<bool?>("includeBasicClaimSet"); }
            set { BackingStore?.Set("includeBasicClaimSet", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CustomClaimsPolicy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new CustomClaimsPolicy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CustomClaimsPolicy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "audienceOverride", n => { AudienceOverride = n.GetStringValue(); } },
                { "claims", n => { Claims = n.GetCollectionOfObjectValues<CustomClaimBase>(CustomClaimBase.CreateFromDiscriminatorValue)?.ToList(); } },
                { "includeApplicationIdInIssuer", n => { IncludeApplicationIdInIssuer = n.GetBoolValue(); } },
                { "includeBasicClaimSet", n => { IncludeBasicClaimSet = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("audienceOverride", AudienceOverride);
            writer.WriteCollectionOfObjectValues<CustomClaimBase>("claims", Claims);
            writer.WriteBoolValue("includeApplicationIdInIssuer", IncludeApplicationIdInIssuer);
            writer.WriteBoolValue("includeBasicClaimSet", IncludeBasicClaimSet);
        }
    }
}
