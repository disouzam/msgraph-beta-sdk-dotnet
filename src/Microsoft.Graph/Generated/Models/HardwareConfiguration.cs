// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    /// <summary>
    /// BIOS configuration and other settings provides customers the ability to configure hardware/bios settings on the enrolled Windows 10/11 Entra ID joined devices by uploading a configuration file generated with their OEM tool (e.g. Dell Command tool). A BIOS configuration policy can be assigned to multiple devices, allowing admins to remotely control a device&apos;s hardware properties (e.g. enable Secure Boot) from the Intune Portal.
    /// </summary>
    public class HardwareConfiguration : Entity, IParsable 
    {
        /// <summary>List of the Azure AD user group ids that hardware configuration will be applied to. Only security groups and Office 365 Groups are supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<HardwareConfigurationAssignment>? Assignments {
            get { return BackingStore?.Get<List<HardwareConfigurationAssignment>?>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#nullable restore
#else
        public List<HardwareConfigurationAssignment> Assignments {
            get { return BackingStore?.Get<List<HardwareConfigurationAssignment>>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#endif
        /// <summary>File content of the hardware configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? ConfigurationFileContent {
            get { return BackingStore?.Get<byte[]?>("configurationFileContent"); }
            set { BackingStore?.Set("configurationFileContent", value); }
        }
#nullable restore
#else
        public byte[] ConfigurationFileContent {
            get { return BackingStore?.Get<byte[]>("configurationFileContent"); }
            set { BackingStore?.Set("configurationFileContent", value); }
        }
#endif
        /// <summary>Timestamp of when the hardware configuration was created. This property is read-only.</summary>
        public DateTimeOffset? CreatedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Description of the hardware configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>List of run states for the hardware configuration across all devices</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<HardwareConfigurationDeviceState>? DeviceRunStates {
            get { return BackingStore?.Get<List<HardwareConfigurationDeviceState>?>("deviceRunStates"); }
            set { BackingStore?.Set("deviceRunStates", value); }
        }
#nullable restore
#else
        public List<HardwareConfigurationDeviceState> DeviceRunStates {
            get { return BackingStore?.Get<List<HardwareConfigurationDeviceState>>("deviceRunStates"); }
            set { BackingStore?.Set("deviceRunStates", value); }
        }
#endif
        /// <summary>Name of the hardware configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>File name of the hardware configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileName {
            get { return BackingStore?.Get<string?>("fileName"); }
            set { BackingStore?.Set("fileName", value); }
        }
#nullable restore
#else
        public string FileName {
            get { return BackingStore?.Get<string>("fileName"); }
            set { BackingStore?.Set("fileName", value); }
        }
#endif
        /// <summary>Indicates the supported oems of hardware configuration</summary>
        public Microsoft.Graph.Beta.Models.HardwareConfigurationFormat? HardwareConfigurationFormat {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.HardwareConfigurationFormat?>("hardwareConfigurationFormat"); }
            set { BackingStore?.Set("hardwareConfigurationFormat", value); }
        }
        /// <summary>Timestamp of when the hardware configuration was modified. This property is read-only.</summary>
        public DateTimeOffset? LastModifiedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("lastModifiedDateTime"); }
            set { BackingStore?.Set("lastModifiedDateTime", value); }
        }
        /// <summary>A value indicating whether per devcive pasword disabled</summary>
        public bool? PerDevicePasswordDisabled {
            get { return BackingStore?.Get<bool?>("perDevicePasswordDisabled"); }
            set { BackingStore?.Set("perDevicePasswordDisabled", value); }
        }
        /// <summary>List of Scope Tag IDs for the hardware configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleScopeTagIds {
            get { return BackingStore?.Get<List<string>?>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#nullable restore
#else
        public List<string> RoleScopeTagIds {
            get { return BackingStore?.Get<List<string>>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#endif
        /// <summary>A summary of the results from an attempt to configure hardware settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public HardwareConfigurationRunSummary? RunSummary {
            get { return BackingStore?.Get<HardwareConfigurationRunSummary?>("runSummary"); }
            set { BackingStore?.Set("runSummary", value); }
        }
#nullable restore
#else
        public HardwareConfigurationRunSummary RunSummary {
            get { return BackingStore?.Get<HardwareConfigurationRunSummary>("runSummary"); }
            set { BackingStore?.Set("runSummary", value); }
        }
#endif
        /// <summary>List of run states for the hardware configuration across all users</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<HardwareConfigurationUserState>? UserRunStates {
            get { return BackingStore?.Get<List<HardwareConfigurationUserState>?>("userRunStates"); }
            set { BackingStore?.Set("userRunStates", value); }
        }
#nullable restore
#else
        public List<HardwareConfigurationUserState> UserRunStates {
            get { return BackingStore?.Get<List<HardwareConfigurationUserState>>("userRunStates"); }
            set { BackingStore?.Set("userRunStates", value); }
        }
#endif
        /// <summary>Version of the hardware configuration (E.g. 1, 2, 3 ...)</summary>
        public int? Version {
            get { return BackingStore?.Get<int?>("version"); }
            set { BackingStore?.Set("version", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="HardwareConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new HardwareConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new HardwareConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"assignments", n => { Assignments = n.GetCollectionOfObjectValues<HardwareConfigurationAssignment>(HardwareConfigurationAssignment.CreateFromDiscriminatorValue)?.ToList(); } },
                {"configurationFileContent", n => { ConfigurationFileContent = n.GetByteArrayValue(); } },
                {"createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"deviceRunStates", n => { DeviceRunStates = n.GetCollectionOfObjectValues<HardwareConfigurationDeviceState>(HardwareConfigurationDeviceState.CreateFromDiscriminatorValue)?.ToList(); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"fileName", n => { FileName = n.GetStringValue(); } },
                {"hardwareConfigurationFormat", n => { HardwareConfigurationFormat = n.GetEnumValue<HardwareConfigurationFormat>(); } },
                {"lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                {"perDevicePasswordDisabled", n => { PerDevicePasswordDisabled = n.GetBoolValue(); } },
                {"roleScopeTagIds", n => { RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"runSummary", n => { RunSummary = n.GetObjectValue<HardwareConfigurationRunSummary>(HardwareConfigurationRunSummary.CreateFromDiscriminatorValue); } },
                {"userRunStates", n => { UserRunStates = n.GetCollectionOfObjectValues<HardwareConfigurationUserState>(HardwareConfigurationUserState.CreateFromDiscriminatorValue)?.ToList(); } },
                {"version", n => { Version = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<HardwareConfigurationAssignment>("assignments", Assignments);
            writer.WriteByteArrayValue("configurationFileContent", ConfigurationFileContent);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfObjectValues<HardwareConfigurationDeviceState>("deviceRunStates", DeviceRunStates);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("fileName", FileName);
            writer.WriteEnumValue<HardwareConfigurationFormat>("hardwareConfigurationFormat", HardwareConfigurationFormat);
            writer.WriteBoolValue("perDevicePasswordDisabled", PerDevicePasswordDisabled);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
            writer.WriteObjectValue<HardwareConfigurationRunSummary>("runSummary", RunSummary);
            writer.WriteCollectionOfObjectValues<HardwareConfigurationUserState>("userRunStates", UserRunStates);
            writer.WriteIntValue("version", Version);
        }
    }
}
