// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models.Partner.Security {
    #pragma warning disable CS1591
    public class PartnerSecurityAlert : Microsoft.Graph.Beta.Models.Entity, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>The activityLogs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ActivityLog>? ActivityLogs {
            get { return BackingStore?.Get<List<ActivityLog>?>("activityLogs"); }
            set { BackingStore?.Set("activityLogs", value); }
        }
#nullable restore
#else
        public List<ActivityLog> ActivityLogs {
            get { return BackingStore?.Get<List<ActivityLog>>("activityLogs"); }
            set { BackingStore?.Set("activityLogs", value); }
        }
#endif
        /// <summary>The additionalDetails property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AdditionalDataDictionary? AdditionalDetails {
            get { return BackingStore?.Get<AdditionalDataDictionary?>("additionalDetails"); }
            set { BackingStore?.Set("additionalDetails", value); }
        }
#nullable restore
#else
        public AdditionalDataDictionary AdditionalDetails {
            get { return BackingStore?.Get<AdditionalDataDictionary>("additionalDetails"); }
            set { BackingStore?.Set("additionalDetails", value); }
        }
#endif
        /// <summary>The affectedResources property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AffectedResource>? AffectedResources {
            get { return BackingStore?.Get<List<AffectedResource>?>("affectedResources"); }
            set { BackingStore?.Set("affectedResources", value); }
        }
#nullable restore
#else
        public List<AffectedResource> AffectedResources {
            get { return BackingStore?.Get<List<AffectedResource>>("affectedResources"); }
            set { BackingStore?.Set("affectedResources", value); }
        }
#endif
        /// <summary>The alertType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertType {
            get { return BackingStore?.Get<string?>("alertType"); }
            set { BackingStore?.Set("alertType", value); }
        }
#nullable restore
#else
        public string AlertType {
            get { return BackingStore?.Get<string>("alertType"); }
            set { BackingStore?.Set("alertType", value); }
        }
#endif
        /// <summary>The catalogOfferId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CatalogOfferId {
            get { return BackingStore?.Get<string?>("catalogOfferId"); }
            set { BackingStore?.Set("catalogOfferId", value); }
        }
#nullable restore
#else
        public string CatalogOfferId {
            get { return BackingStore?.Get<string>("catalogOfferId"); }
            set { BackingStore?.Set("catalogOfferId", value); }
        }
#endif
        /// <summary>The confidenceLevel property</summary>
        public SecurityAlertConfidence? ConfidenceLevel {
            get { return BackingStore?.Get<SecurityAlertConfidence?>("confidenceLevel"); }
            set { BackingStore?.Set("confidenceLevel", value); }
        }
        /// <summary>The customerTenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerTenantId {
            get { return BackingStore?.Get<string?>("customerTenantId"); }
            set { BackingStore?.Set("customerTenantId", value); }
        }
#nullable restore
#else
        public string CustomerTenantId {
            get { return BackingStore?.Get<string>("customerTenantId"); }
            set { BackingStore?.Set("customerTenantId", value); }
        }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The detectedDateTime property</summary>
        public DateTimeOffset? DetectedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("detectedDateTime"); }
            set { BackingStore?.Set("detectedDateTime", value); }
        }
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The firstObservedDateTime property</summary>
        public DateTimeOffset? FirstObservedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("firstObservedDateTime"); }
            set { BackingStore?.Set("firstObservedDateTime", value); }
        }
        /// <summary>The isTest property</summary>
        public bool? IsTest {
            get { return BackingStore?.Get<bool?>("isTest"); }
            set { BackingStore?.Set("isTest", value); }
        }
        /// <summary>The lastObservedDateTime property</summary>
        public DateTimeOffset? LastObservedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("lastObservedDateTime"); }
            set { BackingStore?.Set("lastObservedDateTime", value); }
        }
        /// <summary>The resolvedBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResolvedBy {
            get { return BackingStore?.Get<string?>("resolvedBy"); }
            set { BackingStore?.Set("resolvedBy", value); }
        }
#nullable restore
#else
        public string ResolvedBy {
            get { return BackingStore?.Get<string>("resolvedBy"); }
            set { BackingStore?.Set("resolvedBy", value); }
        }
#endif
        /// <summary>The resolvedOnDateTime property</summary>
        public DateTimeOffset? ResolvedOnDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("resolvedOnDateTime"); }
            set { BackingStore?.Set("resolvedOnDateTime", value); }
        }
        /// <summary>The resolvedReason property</summary>
        public SecurityAlertResolvedReason? ResolvedReason {
            get { return BackingStore?.Get<SecurityAlertResolvedReason?>("resolvedReason"); }
            set { BackingStore?.Set("resolvedReason", value); }
        }
        /// <summary>The severity property</summary>
        public SecurityAlertSeverity? Severity {
            get { return BackingStore?.Get<SecurityAlertSeverity?>("severity"); }
            set { BackingStore?.Set("severity", value); }
        }
        /// <summary>The status property</summary>
        public SecurityAlertStatus? Status {
            get { return BackingStore?.Get<SecurityAlertStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>The subscriptionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionId {
            get { return BackingStore?.Get<string?>("subscriptionId"); }
            set { BackingStore?.Set("subscriptionId", value); }
        }
#nullable restore
#else
        public string SubscriptionId {
            get { return BackingStore?.Get<string>("subscriptionId"); }
            set { BackingStore?.Set("subscriptionId", value); }
        }
#endif
        /// <summary>The valueAddedResellerTenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ValueAddedResellerTenantId {
            get { return BackingStore?.Get<string?>("valueAddedResellerTenantId"); }
            set { BackingStore?.Set("valueAddedResellerTenantId", value); }
        }
#nullable restore
#else
        public string ValueAddedResellerTenantId {
            get { return BackingStore?.Get<string>("valueAddedResellerTenantId"); }
            set { BackingStore?.Set("valueAddedResellerTenantId", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PartnerSecurityAlert"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new PartnerSecurityAlert CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PartnerSecurityAlert();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"activityLogs", n => { ActivityLogs = n.GetCollectionOfObjectValues<ActivityLog>(ActivityLog.CreateFromDiscriminatorValue)?.ToList(); } },
                {"additionalDetails", n => { AdditionalDetails = n.GetObjectValue<AdditionalDataDictionary>(AdditionalDataDictionary.CreateFromDiscriminatorValue); } },
                {"affectedResources", n => { AffectedResources = n.GetCollectionOfObjectValues<AffectedResource>(AffectedResource.CreateFromDiscriminatorValue)?.ToList(); } },
                {"alertType", n => { AlertType = n.GetStringValue(); } },
                {"catalogOfferId", n => { CatalogOfferId = n.GetStringValue(); } },
                {"confidenceLevel", n => { ConfidenceLevel = n.GetEnumValue<SecurityAlertConfidence>(); } },
                {"customerTenantId", n => { CustomerTenantId = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"detectedDateTime", n => { DetectedDateTime = n.GetDateTimeOffsetValue(); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"firstObservedDateTime", n => { FirstObservedDateTime = n.GetDateTimeOffsetValue(); } },
                {"isTest", n => { IsTest = n.GetBoolValue(); } },
                {"lastObservedDateTime", n => { LastObservedDateTime = n.GetDateTimeOffsetValue(); } },
                {"resolvedBy", n => { ResolvedBy = n.GetStringValue(); } },
                {"resolvedOnDateTime", n => { ResolvedOnDateTime = n.GetDateTimeOffsetValue(); } },
                {"resolvedReason", n => { ResolvedReason = n.GetEnumValue<SecurityAlertResolvedReason>(); } },
                {"severity", n => { Severity = n.GetEnumValue<SecurityAlertSeverity>(); } },
                {"status", n => { Status = n.GetEnumValue<SecurityAlertStatus>(); } },
                {"subscriptionId", n => { SubscriptionId = n.GetStringValue(); } },
                {"valueAddedResellerTenantId", n => { ValueAddedResellerTenantId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<ActivityLog>("activityLogs", ActivityLogs);
            writer.WriteObjectValue<AdditionalDataDictionary>("additionalDetails", AdditionalDetails);
            writer.WriteCollectionOfObjectValues<AffectedResource>("affectedResources", AffectedResources);
            writer.WriteStringValue("alertType", AlertType);
            writer.WriteStringValue("catalogOfferId", CatalogOfferId);
            writer.WriteEnumValue<SecurityAlertConfidence>("confidenceLevel", ConfidenceLevel);
            writer.WriteStringValue("customerTenantId", CustomerTenantId);
            writer.WriteStringValue("description", Description);
            writer.WriteDateTimeOffsetValue("detectedDateTime", DetectedDateTime);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteDateTimeOffsetValue("firstObservedDateTime", FirstObservedDateTime);
            writer.WriteBoolValue("isTest", IsTest);
            writer.WriteDateTimeOffsetValue("lastObservedDateTime", LastObservedDateTime);
            writer.WriteStringValue("resolvedBy", ResolvedBy);
            writer.WriteDateTimeOffsetValue("resolvedOnDateTime", ResolvedOnDateTime);
            writer.WriteEnumValue<SecurityAlertResolvedReason>("resolvedReason", ResolvedReason);
            writer.WriteEnumValue<SecurityAlertSeverity>("severity", Severity);
            writer.WriteEnumValue<SecurityAlertStatus>("status", Status);
            writer.WriteStringValue("subscriptionId", SubscriptionId);
            writer.WriteStringValue("valueAddedResellerTenantId", ValueAddedResellerTenantId);
        }
    }
}
